#########测试定义配置#########
#对应的取出该配置的配置类:com.michael.springBoot.tools.TestProperties
test1=jsflzhong
test2=Michael Anderson

#########log配置#########
#linux目录
#logging.path=/user/local/log
#windows目录
logging.path=c:/logs/springBootTestLog/
logging.level.com.favorites=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
logging.level.com.michael.springBoot=ERROR

######### 数据库访问配置 #########
#注意,之所以DB信息在这里配置,而不再application.yml中配置,是因为那边的配置,经亲测,无法被其他xml文件导入.例如generatorConfig.xml中就无法导入.
#.yml中的DB信息也不用注释掉. 因为这个application.properties配置文件的优先级更高,同样的内容会覆盖掉那边的.
#其他的DB附属数据的配置,依然放在了.yml配置文件那边.
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name = com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8
spring.datasource.username = root
spring.datasource.password = root

#########对jsp的支持(已配置在application.yml)#########
## 页面默认前缀目录
spring.mvc.view.prefix=/WEB-INF/jsp/
## 响应页面默认后缀
spring.mvc.view.suffix=.jsp

#########eureka#########
spring.application.name=gateway-service-zuul
server.port=8089
#禁用注册自己,设为false.否则启动时会报错
#但是在需要多点互相注册时,这两项需要设为true.
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
#本项目作为eureka的第一节点
#eureka.instance.hostname=peer1

#指向注册中心.
eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/

######网关的反向代理路由的相关配置######:
#源请求的url
#zuul.routes.api-a.path=/producer/**
#路由到的目标url.这里写service provider在eureka中注册时的应用名.
#这里的反向代理配置表示,所有针对: http://网关url:网关port/producer/xxxx的请求,都会被路由到eureka中的,以"spring-cloud-producer"命名的服务提供者上.
#例如: 对于请求 http://localhost:8089/producer/testHello?name=testZuul,
#会最终请求到本网关所注册到的eureka上的,以"spring-cloud-producer"命名的服务提供者上,
#例如:http://localhost:8083/testHello?name=test或服务的第二节点:http://localhost:8085/testHello?name=test(由eureka负载均衡控制到底由哪个同名服务提供服务)
#zuul.routes.api-a.serviceId=spring-cloud-producer
#之所以注掉上面两行配置,是因为默认就是转发到eureka中匹配的服务的应用名上的.
#例如:
#请求:http://localhost:8089/spring-cloud-producer/testHello?name=test,结果会与上面一样.
#中间的"spring-cloud-producer",就是两个service provider在eureka上注册的应用名.
#配置负载均衡,而不是简单的重定向
zuul.add-host-header=true

######路由重试功能的相关配置######
#是否开启重试功能
zuul.retryable=true
#对当前服务的重试次数(注意,这行配置白底显示无此配置,但实际上是生效了的.)
ribbon.MaxAutoRetries=2
#切换相同Server的次数(注意,这行配置白底显示无此配置,但实际上是生效了的.)
ribbon.MaxAutoRetriesNextServer=0

